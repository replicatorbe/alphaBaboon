#!/usr/bin/env python3
"""
Syst√®me de commandes admin pour AlphaBaboon.
Permet aux ops/halfops de contr√¥ler le bot via IRC.
"""

import logging
import time
from datetime import datetime
from typing import Dict, Optional, Tuple
import json
import traceback
from privilege_checker import PrivilegeChecker
from baboon_vocabulary import baboon_vocab
from host_resolver import HostResolver


class AdminCommands:
    """
    Gestionnaire des commandes administratives IRC.
    Accessible aux utilisateurs ayant le statut op ou halfop.
    """
    
    def __init__(self, config, moderation_handler, badwords_filter, nickname_filter):
        self.config = config
        self.moderation_handler = moderation_handler
        self.badwords_filter = badwords_filter
        self.nickname_filter = nickname_filter
        self.logger = logging.getLogger(__name__)
        self.privilege_checker = PrivilegeChecker(config)
        self.host_resolver = HostResolver(config)
        
        # Commandes disponibles et leurs descriptions
        self.commands = {
            'status': self._cmd_status,
            'clear': self._cmd_clear,
            'stats': self._cmd_stats,
            'health': self._cmd_health,
            'reload': self._cmd_reload,
            'whitelist': self._cmd_whitelist,
            'blacklist': self._cmd_blacklist,
            'badword': self._cmd_badword,
            'help': self._cmd_help,
            'ban': self._cmd_ban,
            'banpseudo': self._cmd_banpseudo,
            'unban': self._cmd_unban,
            'kick': self._cmd_kick,
            'phonestats': self._cmd_phonestats,
            'hostinfo': self._cmd_hostinfo,
            'clearcache': self._cmd_clearcache,
            'regle': self._cmd_regle
        }
        
        # Cache des statuts utilisateur pour optimisation
        self._status_cache = {}
        self._cache_timeout = 60  # 1 minute
    
    def is_admin(self, irc_client, channel: str, nickname: str) -> bool:
        """
        V√©rifie si l'utilisateur a les privil√®ges admin (op ou halfop).
        """
        return self.privilege_checker.is_admin(irc_client, channel, nickname)
    
    def handle_command(self, irc_client, channel: str, sender: str, message: str) -> bool:
        """
        Traite une commande admin potentielle.
        Retourne True si c'√©tait une commande admin trait√©e.
        """
        # V√©rifier si le message commence par !
        if not message.startswith('!'):
            return False
        
        # Extraire la commande et les arguments
        parts = message[1:].split()
        if not parts:
            return False
        
        command = parts[0].lower()
        args = parts[1:] if len(parts) > 1 else []
        
        # V√©rifier si c'est une commande connue
        if command not in self.commands:
            return False
        
        # V√©rifier les privil√®ges admin
        if not self.is_admin(irc_client, channel, sender):
            error_msg = baboon_vocab.get_error_message('no_permission')
            irc_client.privmsg(channel, error_msg)
            return True
        
        try:
            # Ex√©cuter la commande
            self.logger.info(f"Commande admin: {sender} sur {channel}: {message}")
            response = self.commands[command](irc_client, channel, sender, args)
            
            if response:
                # Limiter la longueur de la r√©ponse
                if len(response) > 400:
                    response = response[:397] + "..."
                irc_client.privmsg(channel, response)
                
        except Exception as e:
            error_msg = baboon_vocab.get_error_message('command_error') + f" D√©tail: {str(e)}"
            irc_client.privmsg(channel, error_msg)
            self.logger.error(f"Erreur commande admin {command}: {e}")
            self.logger.error(f"Stack trace: {traceback.format_exc()}")
        
        return True
    
    def _cmd_help(self, irc_client, channel: str, sender: str, args: list) -> str:
        """Affiche l'aide des commandes admin."""
        return baboon_vocab.get_help_message()
    
    def _cmd_status(self, irc_client, channel: str, sender: str, args: list) -> str:
        """Affiche le statut d'un utilisateur."""
        if not args:
            return baboon_vocab.get_error_message('invalid_usage') + " Usage: !status <babouin>"
        
        username = args[0]
        
        # Statut de mod√©ration
        mod_status = self.moderation_handler.get_user_status(username)
        
        # Statut badwords
        badword_stats = self.badwords_filter.get_user_stats(username)
        
        # Statut t√©l√©phone si disponible
        phone_stats = ""
        if hasattr(self.moderation_handler, 'phone_moderator'):
            phone_info = self.moderation_handler.phone_moderator.get_user_stats(username)
            if phone_info:
                phone_stats = f", üìû Avert. banane: {phone_info['warnings']}"
        
        # Statut des privil√®ges
        privilege_status = self.privilege_checker.get_user_status_string(irc_client, channel, username)
        
        # Compiler le statut complet
        status_data = {
            'warnings': mod_status['warnings'],
            'kicks': mod_status['kicks'],
            'violation_types': mod_status['violation_types']
        }
        
        response = baboon_vocab.get_status_message(username, status_data)
        
        if badword_stats and badword_stats['violation_count'] > 0:
            response += f", üö´ Gros mots: {badword_stats['violation_count']}"
        
        response += phone_stats
        response += f" | Rang: {privilege_status}"
        
        return response
    
    def _cmd_clear(self, irc_client, channel: str, sender: str, args: list) -> str:
        """Efface l'historique d'un utilisateur."""
        if not args:
            return "‚ùå Usage: !clear <username>"
        
        username = args[0]
        
        # Nettoyer l'historique de mod√©ration
        self.moderation_handler.clear_user_history(username)
        
        # Nettoyer l'historique badwords
        self.badwords_filter.reset_user_violations(username)
        
        # Nettoyer l'historique t√©l√©phone si disponible
        if hasattr(self.moderation_handler, 'phone_moderator'):
            self.moderation_handler.phone_moderator.reset_user_violations(username)
        
        self.logger.info(f"Historique nettoy√© pour {username} par {sender}")
        return f"üêí‚úÖ Ardoise nettoy√©e pour le babouin {username} par {sender}"
    
    def _cmd_stats(self, irc_client, channel: str, sender: str, args: list) -> str:
        """Affiche les statistiques g√©n√©rales du bot."""
        # Stats badwords
        badword_stats = self.badwords_filter.get_stats_summary()
        
        # Stats t√©l√©phone si disponible
        phone_stats = {}
        if hasattr(self.moderation_handler, 'phone_moderator'):
            phone_stats = self.moderation_handler.phone_moderator.get_stats_summary()
        
        # Stats hosts cache
        cache_stats = self.host_resolver.get_cache_stats()
        
        response = f"üêíüìà Stats de la jungle: "
        response += f"üö´ Babouins avec gros mots: {badword_stats.get('users_with_violations', 0)}, "
        
        if phone_stats:
            response += f"üìû Babouins avec avert. banane: {phone_stats.get('users_with_warnings', 0)}, "
            response += f"Bannis banane: {phone_stats.get('currently_banned', 0)}, "
        
        # Ajout des stats de cache hosts
        response += f"üîç Hosts track√©s: {cache_stats['total_cached']} ({cache_stats['expired_entries']} exp.), "
        
        # Uptime approximatif (depuis le dernier red√©marrage)
        uptime_hours = int((time.time() - getattr(self, '_start_time', time.time())) / 3600)
        response += f"‚è∞ AlphaBaboon veille depuis: ~{uptime_hours}h"
        
        return response
    
    def _cmd_health(self, irc_client, channel: str, sender: str, args: list) -> str:
        """Affiche l'√©tat de sant√© du bot."""
        # V√©rifier la connexion IRC
        irc_status = "‚úÖ Connect√©" if irc_client.connected else "‚ùå D√©connect√©"
        
        # V√©rifier OpenAI si disponible
        openai_status = "‚ùì N/A"
        if hasattr(self.moderation_handler, 'content_analyzer'):
            try:
                # Test simple de l'API OpenAI
                test_response = self.moderation_handler.content_analyzer.client.moderations.create(
                    input="test",
                    model=self.moderation_handler.content_analyzer.moderation_model
                )
                openai_status = "‚úÖ OpenAI OK"
            except Exception as e:
                openai_status = f"‚ùå OpenAI: {str(e)[:30]}..."
        
        return f"üêíüè• Sant√© d'AlphaBaboon: Jungle {irc_status}, {openai_status}"
    
    def _cmd_reload(self, irc_client, channel: str, sender: str, args: list) -> str:
        """Recharge la configuration."""
        try:
            # Recharger badwords
            if hasattr(self.badwords_filter, 'reload_patterns'):
                self.badwords_filter.reload_patterns()
            
            # Recharger nickname filter
            if hasattr(self.nickname_filter, 'reload_patterns'):
                self.nickname_filter.reload_patterns()
            
            self.logger.info(f"Configuration recharg√©e par {sender}")
            return f"üêí‚úÖ R√®gles de la tribu recharg√©es par {sender}"
            
        except Exception as e:
            return f"‚ùå Erreur lors du rechargement: {str(e)}"
    
    def _cmd_whitelist(self, irc_client, channel: str, sender: str, args: list) -> str:
        """G√®re la whitelist."""
        if len(args) < 2:
            return "‚ùå Usage: !whitelist <add/remove> <username>"
        
        action = args[0].lower()
        username = args[1]
        
        if action == "add":
            return f"üêí‚úÖ {username} ajout√© aux babouins prot√©g√©s par {sender}"
        elif action == "remove":
            return f"üêí‚úÖ {username} retir√© des babouins prot√©g√©s par {sender}"
        else:
            return baboon_vocab.get_error_message('invalid_usage')
    
    def _cmd_blacklist(self, irc_client, channel: str, sender: str, args: list) -> str:
        """G√®re la blacklist."""
        if len(args) < 2:
            return "‚ùå Usage: !blacklist <add/remove> <username>"
        
        action = args[0].lower()
        username = args[1]
        
        if action == "add":
            return f"üêí‚ö†Ô∏è {username} ajout√© aux babouins ind√©sirables par {sender}"
        elif action == "remove":
            return f"üêí‚úÖ {username} retir√© des babouins ind√©sirables par {sender}"
        else:
            return baboon_vocab.get_error_message('invalid_usage')
    
    def _cmd_badword(self, irc_client, channel: str, sender: str, args: list) -> str:
        """G√®re les mots interdits."""
        if len(args) < 2:
            return "‚ùå Usage: !badword <add/remove> <pattern>"
        
        action = args[0].lower()
        pattern = " ".join(args[1:])  # Rejoindre le reste comme pattern
        
        try:
            if action == "add":
                return f"üêí‚úÖ Gros mot '{pattern}' ajout√© aux interdictions par {sender}"
            elif action == "remove":
                return f"üêí‚úÖ Gros mot '{pattern}' retir√© des interdictions par {sender}"
            else:
                return baboon_vocab.get_error_message('invalid_usage')
        except Exception as e:
            return f"‚ùå Erreur: {str(e)}"
    
    def _cmd_ban(self, irc_client, channel: str, sender: str, args: list) -> str:
        """Ban un utilisateur par host (*@host) pour plus d'efficacit√©."""
        if not args:
            return baboon_vocab.get_error_message('invalid_usage') + " Usage: !ban <babouin> [raison]"
        
        username = args[0]
        reason = " ".join(args[1:]) if len(args) > 1 else f"Banni par {sender}"
        
        try:
            # Essayer d'abord de r√©cup√©rer le host directement depuis WHO
            host = self._get_user_host_via_who(irc_client, username)
            
            if host:
                # Ban par host: plus efficace
                ban_mask = f"*@{host}"
                ban_type = "par host"
                has_host = True
            else:
                # Fallback: ban par pseudo
                ban_mask = f"{username}!*@*"
                ban_type = "par pseudo"
                has_host = False
                host = "N/A"
            
            # Appliquer le ban
            ban_command = f"mode {channel} +b {ban_mask}"
            irc_client.connection.send_raw(ban_command)
            
            # Log d√©taill√©
            ban_detail = {
                'username': username,
                'ban_mask': ban_mask,
                'has_host': has_host,
                'host': host,
                'banned_by': sender,
                'reason': reason
            }
            self.logger.warning(f"üî® BAN APPLIED: {ban_detail}")
            
            # Message de retour
            response = baboon_vocab.get_action_message('ban', username, f"par l'Alpha {sender}")
            response += f" (Ban {ban_type}: {ban_mask})"
            
            return response
            
        except Exception as e:
            error_detail = f"Erreur ban {username}: {str(e)}"
            self.logger.error(error_detail)
            return baboon_vocab.get_error_message('command_error') + f" {str(e)}"
    
    def _cmd_unban(self, irc_client, channel: str, sender: str, args: list) -> str:
        """Unban un utilisateur (essaie les deux formats: host et pseudo)."""
        if not args:
            return baboon_vocab.get_error_message('invalid_usage') + " Usage: !unban <babouin>"
        
        username = args[0]
        
        try:
            # Essayer tous les formats possibles de ban
            unban_masks = []
            unban_type_parts = []
            
            # 1. V√©rifier si on a un host en cache pour ce user
            user_info = self.host_resolver.get_user_full_info(irc_client, channel, username)
            
            if user_info.get('has_host'):
                # Format par host: *@host
                host = user_info.get('host')
                host_mask = f"*@{host}"
                unban_masks.append(host_mask)
                unban_type_parts.append("host")
            
            # 2. Toujours essayer le format par pseudo: pseudo!*@*
            pseudo_mask = f"{username}!*@*"
            unban_masks.append(pseudo_mask)
            unban_type_parts.append("pseudo")
            
            # Envoyer toutes les commandes unban
            for mask in unban_masks:
                unban_command = f"mode {channel} -b {mask}"
                irc_client.connection.send_raw(unban_command)
                self.logger.info(f"Unban envoy√©: {unban_command}")
            
            # Log d√©taill√©
            unban_detail = {
                'username': username,
                'unban_masks': unban_masks,
                'unban_type': " + ".join(unban_type_parts),
                'unbanned_by': sender
            }
            self.logger.info(f"‚úÖ UNBAN APPLIED: {unban_detail}")
            
            response = baboon_vocab.get_action_message('unban', username, f"par l'Alpha {sender}")
            response += f" ({' + '.join(unban_type_parts)})"
            
            return response
            
        except Exception as e:
            error_detail = f"Erreur unban {username}: {str(e)}"
            self.logger.error(error_detail)
            return baboon_vocab.get_error_message('command_error') + f" {str(e)}"
    
    def _cmd_kick(self, irc_client, channel: str, sender: str, args: list) -> str:
        """Kick un utilisateur."""
        if not args:
            return "‚ùå Usage: !kick <username> [raison]"
        
        username = args[0]
        reason = " ".join(args[1:]) if len(args) > 1 else f"Kick√© par {sender}"
        
        try:
            irc_client.connection.kick(channel, username, reason)
            self.logger.info(f"DEGOMMAGE manuel: {username} par {sender} - Raison: {reason}")
            return baboon_vocab.get_action_message('kick', username, f"par l'Alpha {sender}")
        except Exception as e:
            return f"‚ùå Erreur kick: {str(e)}"
    
    def _cmd_phonestats(self, irc_client, channel: str, sender: str, args: list) -> str:
        """Affiche les stats d√©taill√©es des num√©ros de t√©l√©phone."""
        if hasattr(self.moderation_handler, 'phone_moderator'):
            stats = self.moderation_handler.phone_moderator.get_stats_summary()
            response = f"üêíüìû Stats bananes: "
            response += f"Babouins track√©s: {stats.get('total_users_tracked', 0)}, "
            response += f"Avec grondements: {stats.get('users_with_warnings', 0)}, "
            response += f"Bannis actuellement: {stats.get('currently_banned', 0)}, "
            response += f"Num√©ros bananes d√©tect√©s: {stats.get('total_phone_numbers_detected', 0)}"
            return response
        else:
            return "‚ùå Module t√©l√©phone non disponible"
    
    def _cmd_hostinfo(self, irc_client, channel: str, sender: str, args: list) -> str:
        """Affiche les informations host d'un utilisateur pour debug."""
        if not args:
            return baboon_vocab.get_error_message('invalid_usage') + " Usage: !hostinfo <babouin>"
        
        username = args[0]
        
        try:
            user_info = self.host_resolver.get_user_full_info(irc_client, channel, username)
            cache_stats = self.host_resolver.get_cache_stats()
            
            # Status plus d√©taill√©
            if user_info.get('has_host'):
                host_status = f"‚úÖ {user_info['host']}"
                ban_will_use = "par host (*@host)" 
            else:
                host_status = "‚ùå Non trouv√©"
                ban_will_use = "par pseudo (pseudo!*@*)"
            
            response = f"üêíüîç {username}: Host {host_status}"
            
            # √Çge du cache plus lisible
            if user_info.get('cache_age') is not None:
                age = user_info['cache_age']
                if age < 60:
                    age_str = f"{age}s"
                elif age < 3600:
                    age_str = f"{age//60}min"
                else:
                    age_str = f"{age//3600}h"
                response += f" (Cache: {age_str})"
            else:
                response += " (Pas en cache)"
            
            response += f" | Ban utilisera: {ban_will_use}"
            response += f" | Cache: {cache_stats['total_cached']}/{cache_stats['expired_entries']} exp."
            
            return response
            
        except Exception as e:
            return baboon_vocab.get_error_message('command_error') + f" {str(e)}"
    
    def _cmd_clearcache(self, irc_client, channel: str, sender: str, args: list) -> str:
        """Vide le cache des hosts pour forcer une nouvelle d√©tection."""
        try:
            cache_stats_before = self.host_resolver.get_cache_stats()
            hosts_count = cache_stats_before['total_cached']
            
            # Vider le cache
            self.host_resolver.clear_cache()
            
            self.logger.info(f"Cache hosts vid√© par {sender} ({hosts_count} entr√©es supprim√©es)")
            return f"üêíüóëÔ∏è Cache des hosts vid√© par {sender} ({hosts_count} babouins oubli√©s)"
            
        except Exception as e:
            self.logger.error(f"Erreur vidage cache: {e}")
            return baboon_vocab.get_error_message('command_error') + f" {str(e)}"
    
    def _cmd_banpseudo(self, irc_client, channel: str, sender: str, args: list) -> str:
        """Ban un utilisateur par pseudo (pseudo!*@*) uniquement."""
        if not args:
            return baboon_vocab.get_error_message('invalid_usage') + " Usage: !banpseudo <babouin> [raison]"
        
        username = args[0]
        reason = " ".join(args[1:]) if len(args) > 1 else f"Banni par {sender}"
        
        try:
            # Utiliser directement le masque pseudo
            ban_mask = self.host_resolver.get_pseudo_ban_mask(username)
            
            # Appliquer le ban avec le masque pseudo
            ban_command = f"mode {channel} +b {ban_mask}"
            irc_client.connection.send_raw(ban_command)
            
            # Log d√©taill√©
            ban_detail = {
                'username': username,
                'ban_mask': ban_mask,
                'ban_type': 'pseudo_only',
                'banned_by': sender,
                'reason': reason
            }
            self.logger.warning(f"üî® BANPSEUDO APPLIED: {ban_detail}")
            
            response = baboon_vocab.get_action_message('ban', username, f"par l'Alpha {sender}")
            response += f" (Ban par pseudo: {ban_mask})"
            
            return response
            
        except Exception as e:
            error_detail = f"Erreur banpseudo {username}: {str(e)}"
            self.logger.error(error_detail)
            return baboon_vocab.get_error_message('command_error') + f" {str(e)}"
    
    def _cmd_regle(self, irc_client, channel: str, sender: str, args: list) -> str:
        """Affiche les r√®gles de bon savoir vivre sur le tchat."""
        try:
            # V√©rifier si le channel a le mode +V activ√©
            has_voice_mode = self._check_channel_voice_mode(irc_client, channel)
            
            # R√®gles de base communes
            rules = [
                "üêíüìã R√®gles de bon savoir vivre sur le tchat:",
                "‚Ä¢ Respect mutuel entre tous les babouins",
                "‚Ä¢ Pas d'insultes, de harc√®lement ou d'attaques personnelles", 
                "‚Ä¢ Pas de spam ou de flood",
                "‚Ä¢ Pas de publicit√© non autoris√©e",
                "‚Ä¢ Respecter les d√©cisions des mod√©rateurs"
            ]
            
            # Ajouter r√®gle adulte selon le mode +V
            if not has_voice_mode:
                rules.append("‚Ä¢ Discussions √† caract√®re adulte interdites")
            
            rules.append("‚Ä¢ Utiliser le bon sens et garder une ambiance conviviale üå¥")
            
            # Joindre les r√®gles avec des retours √† la ligne
            response = " | ".join(rules)
            
            self.logger.info(f"R√®gles affich√©es sur {channel} par {sender} (Mode +V: {has_voice_mode})")
            return response
            
        except Exception as e:
            self.logger.error(f"Erreur affichage r√®gles: {e}")
            return baboon_vocab.get_error_message('command_error') + f" {str(e)}"
    
    def _check_channel_voice_mode(self, irc_client, channel: str) -> bool:
        """
        V√©rifie si le channel a le mode +V activ√©.
        Retourne True si +V est actif, False sinon.
        """
        try:
            # M√©thode 1: Liste des canaux connus avec mode +V (hardcod√© pour #adultes)
            voice_only_channels = ['#adultes']  # Canaux connus comme √©tant en mode +V
            if channel.lower() in [c.lower() for c in voice_only_channels]:
                self.logger.debug(f"Canal {channel} identifi√© comme +V (liste hardcod√©e)")
                return True
            
            # M√©thode 2: V√©rifier dans les propri√©t√©s du channel si disponibles
            if hasattr(irc_client, 'channels') and channel in irc_client.channels:
                channel_obj = irc_client.channels[channel]
                
                # V√©rifier les modes du channel
                if hasattr(channel_obj, 'modes'):
                    modes = str(channel_obj.modes)
                    if 'V' in modes or 'v' in modes:
                        self.logger.debug(f"Mode +V d√©tect√© via channel.modes pour {channel}: {modes}")
                        return True
                
                # V√©rifier d'autres propri√©t√©s possibles
                if hasattr(channel_obj, 'voice_only') and channel_obj.voice_only:
                    self.logger.debug(f"Mode +V d√©tect√© via channel.voice_only pour {channel}")
                    return True
                
                # V√©rifier les attributs du channel
                for attr in dir(channel_obj):
                    if 'voice' in attr.lower() or 'mode' in attr.lower():
                        try:
                            value = getattr(channel_obj, attr)
                            if 'V' in str(value) or (hasattr(value, '__call__') and 'V' in str(value())):
                                self.logger.debug(f"Mode +V peut-√™tre d√©tect√© via {attr} pour {channel}")
                                return True
                        except:
                            continue
            
            # M√©thode 3: Envoyer une requ√™te MODE pour obtenir les modes du canal
            try:
                irc_client.connection.send_raw(f"MODE {channel}")
                self.logger.debug(f"Requ√™te MODE envoy√©e pour {channel}")
            except:
                pass
            
            # Par d√©faut, consid√©rer qu'il n'y a pas de mode +V
            self.logger.debug(f"Aucun mode +V d√©tect√© pour {channel}")
            return False
            
        except Exception as e:
            self.logger.warning(f"Erreur v√©rification mode +V pour {channel}: {e}")
            return False
    
    def _get_user_host_via_who(self, irc_client, username: str) -> Optional[str]:
        """
        R√©cup√®re le host d'un utilisateur, principalement depuis le cache.
        """
        try:
            # M√©thode 1: V√©rifier dans le cache du host_resolver (aliment√© automatiquement)
            if self.host_resolver._is_host_cached(username):
                cached_host = self.host_resolver.user_hosts[username]
                self.logger.info(f"Host trouv√© en cache pour {username}: {cached_host}")
                return cached_host
            
            # Si pas en cache, l'utilisateur n'a probablement pas √©t√© vu r√©cemment
            # Envoyer un WHOIS pour forcer la r√©cup√©ration (asynchrone)
            self.logger.info(f"Host non trouv√© en cache pour {username}, envoi WHOIS")
            irc_client.connection.send_raw(f"WHOIS {username}")
            
            # Retourner None pour utiliser le ban par pseudo
            # Le WHOIS mettra √† jour le cache pour les prochaines fois
            self.logger.info(f"Utilisation du ban par pseudo pour {username} (host non disponible)")
            return None
            
        except Exception as e:
            self.logger.error(f"Erreur r√©cup√©ration host pour {username}: {e}")
            return None


if __name__ == "__main__":
    # Test basique
    print("AdminCommands module - Test OK")