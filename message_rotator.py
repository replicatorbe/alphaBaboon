import random
import logging
from datetime import datetime
from typing import List, Dict


class MessageRotator:
    def __init__(self, config):
        self.config = config
        self.logger = logging.getLogger(__name__)
        self.redirect_channel = config['irc']['redirect_channel']
        
        # Historique des messages utilis√©s pour √©viter les r√©p√©titions
        self.message_history = []
        self.max_history = 10  # √âviter la r√©p√©tition des 10 derniers messages
        
        # Messages de base (seront compl√©t√©s par les messages temporels)
        self.base_redirect_messages = [
            f"üêí @{{user}}, je t'emm√®ne sur {self.redirect_channel} pour ce genre de discussion ! üòâ",
            f"üî• @{{user}}, hop direction {self.redirect_channel} pour les sujets chauds ! üå∂Ô∏è", 
            f"üòä @{{user}}, {self.redirect_channel} sera parfait pour continuer cette conversation !",
            f"üêí @{{user}}, allez zou ! {self.redirect_channel} t'attend pour parler de √ßa ! üòÑ",
            f"üå∂Ô∏è @{{user}}, ce sujet a sa place sur {self.redirect_channel} ! On y va ? üòä",
            f"üîÑ @{{user}}, petit d√©m√©nagement vers {self.redirect_channel} pour cette discussion ! üè†",
            f"üéØ @{{user}}, {self.redirect_channel} est le bon endroit pour √ßa ! Je t'y emm√®ne ! üöÄ",
            f"üí´ @{{user}}, direction {self.redirect_channel} pour approfondir le sujet ! ‚ú®"
        ]
        
        # Messages d'accueil de base
        self.base_welcome_messages = [
            f"üêí Salut {{user}} ! Tu peux parler librement de sujets adultes ici, c'est fait pour √ßa ! üòä",
            f"üî• Hey {{user}} ! Bienvenue sur {self.redirect_channel}, ici c'est le bon endroit pour ce genre de discussion ! üòâ",
            f"üå∂Ô∏è Coucou {{user}} ! Sur {self.redirect_channel} on peut aborder tous les sujets, fais-toi plaisir ! üòÑ",
            f"‚ú® Bienvenue {{user}} ! {self.redirect_channel} est ton espace de libert√© pour ces discussions ! üéâ",
            f"üéØ {{user}}, tu es maintenant dans le bon salon ! Ici pas de limites ! üí¨",
            f"üåü Salut {{user}} ! {self.redirect_channel} t'accueille pour tes discussions sans tabou ! üó£Ô∏è",
            f"üîì Hey {{user}} ! Zone libre activ√©e sur {self.redirect_channel} ! Parle sans contraintes ! üéä"
        ]

    def get_redirect_message(self, user: str, context: str = None) -> str:
        """Retourne un message de redirection en √©vitant les r√©p√©titions."""
        current_hour = datetime.now().hour
        
        # Ajouter des messages contextuels selon l'heure
        time_specific_messages = self._get_time_specific_redirect_messages(current_hour)
        
        # Combiner les messages de base et temporels
        all_messages = self.base_redirect_messages + time_specific_messages
        
        # Filtrer les messages r√©cemment utilis√©s
        available_messages = [
            msg for msg in all_messages 
            if msg not in self.message_history
        ]
        
        # Si tous les messages ont √©t√© utilis√©s r√©cemment, r√©initialiser l'historique
        if not available_messages:
            available_messages = all_messages
            self.message_history.clear()
        
        # Choisir un message au hasard
        chosen_message = random.choice(available_messages)
        
        # Ajouter √† l'historique
        self.message_history.append(chosen_message)
        if len(self.message_history) > self.max_history:
            self.message_history.pop(0)
        
        return chosen_message.format(user=user)

    def get_welcome_message(self, user: str) -> str:
        """Retourne un message d'accueil contextuel."""
        current_hour = datetime.now().hour
        
        # Ajouter des messages contextuels selon l'heure
        time_specific_messages = self._get_time_specific_welcome_messages(current_hour)
        
        # Combiner les messages de base et temporels
        all_messages = self.base_welcome_messages + time_specific_messages
        
        # S√©lection al√©atoire
        chosen_message = random.choice(all_messages)
        
        return chosen_message.format(user=user)

    def _get_time_specific_redirect_messages(self, hour: int) -> List[str]:
        """Retourne des messages de redirection adapt√©s √† l'heure."""
        redirect_channel = self.redirect_channel
        
        if 6 <= hour < 12:  # Matin
            return [
                f"‚òÄÔ∏è @{{user}}, pour bien commencer la journ√©e, direction {redirect_channel} ! üåÖ",
                f"üå§Ô∏è @{{user}}, matin√©e √©pic√©e en vue ? {redirect_channel} t'attend ! ‚òï"
            ]
        elif 12 <= hour < 14:  # Midi  
            return [
                f"üçΩÔ∏è @{{user}}, pause d√©jeuner coquine ? {redirect_channel} pour l'ap√©ritif ! ü•Ç",
                f"‚òÄÔ∏è @{{user}}, midi bien chaud ! Direction {redirect_channel} ! üå°Ô∏è"
            ]
        elif 14 <= hour < 18:  # Apr√®s-midi
            return [
                f"üåû @{{user}}, l'apr√®s-midi se r√©chauffe ! {redirect_channel} pour la suite ! üî•",
                f"‚òï @{{user}}, pause caf√© √©pic√©e ? {redirect_channel} est parfait ! ‚òï"
            ]
        elif 18 <= hour < 22:  # Soir√©e
            return [
                f"üåÜ @{{user}}, soir√©e qui commence bien ! {redirect_channel} pour la d√©tente ! üç∑",
                f"üî• @{{user}}, l'ap√©ro se corse ! {redirect_channel} pour continuer ! üçª"
            ]
        else:  # Nuit (22h-6h)
            return [
                f"üåô @{{user}}, nuit coquine en perspective ? {redirect_channel} t'accueille ! ‚ú®",
                f"üåü @{{user}}, les nuits sont faites pour √ßa ! Direction {redirect_channel} ! üåõ"
            ]

    def _get_time_specific_welcome_messages(self, hour: int) -> List[str]:
        """Retourne des messages d'accueil adapt√©s √† l'heure."""
        redirect_channel = self.redirect_channel
        
        if 6 <= hour < 12:  # Matin
            return [
                f"üåÖ Bonjour {{user}} ! {redirect_channel} pour un r√©veil en douceur ! ‚òÄÔ∏è",
                f"‚òï Salut {{user}} ! Caf√© et discussions libres sur {redirect_channel} ! üå§Ô∏è"
            ]
        elif 12 <= hour < 14:  # Midi
            return [
                f"üçΩÔ∏è Bon app√©tit {{user}} ! {redirect_channel} pour dig√©rer en beaut√© ! üòã",
                f"ü•Ç {{user}}, pause d√©jeuner d√©tente sur {redirect_channel} ! Sant√© ! üç∑"
            ]
        elif 14 <= hour < 18:  # Apr√®s-midi
            return [
                f"‚òÄÔ∏è {{user}}, {redirect_channel} pour une apr√®s-midi d√©tendue ! üåû",
                f"‚òï Bienvenue {{user}} ! {redirect_channel} pour ta pause bien m√©rit√©e ! üòå"
            ]
        elif 18 <= hour < 22:  # Soir√©e
            return [
                f"üåÜ Bonsoir {{user}} ! {redirect_channel} pour une soir√©e d√©contract√©e ! üç∑",
                f"üî• {{user}}, soir√©e sympa en vue sur {redirect_channel} ! Profite bien ! üéâ"
            ]
        else:  # Nuit
            return [
                f"üåô Bonsoir {{user}} ! {redirect_channel} pour des nuits √©toil√©es ! ‚ú®",
                f"üåü {{user}}, nuit libre sur {redirect_channel} ! Fais-toi plaisir ! üåõ"
            ]

    def get_stats(self) -> Dict:
        """Retourne les statistiques du rotateur de messages."""
        return {
            'total_redirect_messages': len(self.base_redirect_messages),
            'total_welcome_messages': len(self.base_welcome_messages),
            'recent_messages_used': len(self.message_history),
            'max_history_size': self.max_history,
            'current_hour': datetime.now().hour
        }